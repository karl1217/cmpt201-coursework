#define _DEFAULT_SOURCE
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#define BUF_SIZE 256
struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);

  if (len < 0) {
    perror("error");
    // handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  // Increase heap by 256 bytes
  void *start_address = sbrk(256);

  // Place first header in first block
  struct header *first_block = (struct header *)start_address;

  // Place second header 128 bytes after first header
  struct header *second_block = (struct header *)(start_address + 128);

  // Initialize headers
  first_block->size = 128;
  first_block->next = NULL;

  second_block->size = 128;
  second_block->next = first_block;

  // Initialize data
  memset(first_block, 0, 128);
  memset(second_block, 1, 128);

  // Print
  print_out("first block: %p\n", &first_block, sizeof(&first_block));
  print_out("second block: %p\n", &second_block, sizeof(&second_block));

  print_out("first block size: %d\n", &first_block->size,
            sizeof(&first_block->size));
  print_out("first block next: %p\n", &first_block->next, sizeof(&first_block->next));
  return 0;

}
